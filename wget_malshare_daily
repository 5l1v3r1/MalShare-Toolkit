#! /usr/bin/env python
# Copyright (C) 2013 Malshare Developers.
# Pull All Daily MD5 Hashes

import os
import re
import sys
import string
import logging
import argparse
import requests

api_key = ""

logging.basicConfig(format='%(asctime)s %(levelname)s:%(message)s', level=logging.WARNING)

def main(): 
    global api_key
   
    parser = argparse.ArgumentParser()
    parser.add_argument("-k", "--apikey", help="API Key", required=False)
    parser.add_argument("-o", "--outfolder", help="Folder to save samples to", required=False)
    parser.add_argument("-x", "--vxcage", help="VXCage server", required=False)

    args = parser.parse_args()

    if stored_api_check() == False:
        if args.apikey:
            api_key = args.apikey


    if (not api_key):
        logging.error("API Key not entered")
        sys.exit(1)

    if args.outfolder:
        if (not os.path.exists(args.outfolder)):
            os.makedirs(args.outfolder)
    
    for md5_hash in pull_daily_list():
        if (md5_hash):
            logging.info("Downloading %s" % md5_hash)
            pull_file(md5_hash, args.vxcage, args.outfolder, api_key)

def pull_daily_list():
    try:
        url = "http://www.malshare.com/daily/malshare.current.txt"
        user_agent = {'User-agent': 'wget_malshare daily 1.0'}

        r = requests.get(url, headers=user_agent)
        for line in r.content.split('\n'):
            logging.debug("Yield line: %s" % line)
            yield line
        logging.debug("No more lines")

    except Exception as e:
        logging.error("Problem connecting.  Please Try again.")
        logging.exception(sys.exc_info())
        logging.exception(type(e))
        logging.exception(e.args)
        logging.exception(e)
        sys.exit(1)

def pull_file(file_hash, vxcage, outfolder, api_key):
    try:
        malshare_url = "http://api.malshare.com/sampleshare.php"
        payload = {'action': 'getfile', 'api_key': api_key, 'hash' : file_hash }
        user_agent = {'User-agent': 'wget_malshare daily 1.0'}

        r = requests.get(malshare_url, params=payload, headers=user_agent)

        sample = r.content

        if (sample == "Sample not found"):
            logging.error("Sample not Found")
            return None
        if (sample == "ERROR! => Account not activated"):
            logging.error("Bad API Key")
            return None

        if outfolder:
            open(os.path.join(outfolder, file_hash),"wb").write(sample)
            logging.info("Saved %s" % file_hash)

        if vxcage:
            vxcage_url = vxcage + "/malware/add"
            files = {'file': sample }
            payload = {'tags' : 'malshare'}
            r = requests.post(vxcage_url, files=files, data=payload, headers=user_agent)
            if r.json()['message'] == 'added':
                logging.info("Uploaded %s to VXCage" % file_hash)
    except Exception as e:
        logging.error("Problem connecting. Please Try again.")
        logging.exception(sys.exc_info())
        logging.exception(type(e))
        logging.exception(e.args)
        logging.exception(e)
        sys.exit(1)

def stored_api_check():
    global api_key
    try:
        if ( os.path.exists(os.path.expanduser('~') + '/.malshare' ) ):
            with open( os.path.expanduser('~') + '/.malshare' ) as handle_api_file:
                api_key = func_parse_api_key(handle_api_file.readlines())
                return True
        elif (  os.path.exists('.malshare' ) ):
            with open( '.malshare' ) as handle_api_file:
                api_key = func_parse_api_key(handle_api_file.readlines())
                return True
    except IOError:
        pass
    return False

def func_parse_api_key(lst_tmp_key):
    str_tmp_key = "".join(lst_tmp_key).rstrip()
    if re.match("^[A-Za-z0-9]+$", str_tmp_key):
        return str_tmp_key



if __name__ == "__main__":
    main()
    
